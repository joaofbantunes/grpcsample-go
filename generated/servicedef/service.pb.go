// Code generated by protoc-gen-go. DO NOT EDIT.
// source: servicedef/service.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Counter service

type CounterClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := grpc.Invoke(ctx, "/servicedef.Counter/Increment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Counter service

type CounterServer interface {
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicedef.Counter/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicedef.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _Counter_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicedef/service.proto",
}

func init() { proto.RegisterFile("servicedef/service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x4d, 0x49, 0x4d, 0xd3, 0x87, 0x32, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xb8, 0x10, 0x32, 0x52, 0x92, 0x48, 0xaa, 0x72, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x8b, 0x21,
	0xca, 0x8c, 0x42, 0xb9, 0xd8, 0x9d, 0xf3, 0x4b, 0xf3, 0x4a, 0x52, 0x8b, 0x84, 0xbc, 0xb8, 0x38,
	0x3d, 0xf3, 0x92, 0x8b, 0x52, 0x73, 0x53, 0xf3, 0x4a, 0x84, 0x64, 0xf4, 0x10, 0x7a, 0xf4, 0xe0,
	0xc2, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xb2, 0x38, 0x64, 0x8b, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x95, 0x18, 0x9c, 0xb4, 0xa3, 0xd8, 0xa1, 0x2a, 0x56, 0x31, 0xc9, 0x3b, 0xe7, 0xa7,
	0x64, 0xe6, 0xa5, 0xfb, 0x66, 0xe6, 0x64, 0x96, 0x64, 0x26, 0xea, 0xb9, 0x17, 0x15, 0x24, 0x07,
	0x27, 0xe6, 0x16, 0xe4, 0xa4, 0xea, 0x05, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x25, 0xb1, 0x81, 0x9d,
	0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xfd, 0x09, 0x4a, 0xcd, 0x00, 0x00, 0x00,
}
